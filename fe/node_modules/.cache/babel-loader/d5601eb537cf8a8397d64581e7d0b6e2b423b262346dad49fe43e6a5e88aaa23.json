{"ast":null,"code":"var _jsxFileName = \"/Users/darshan.mohan/Desktop/leet/go/Assessment/fe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [start, setStart] = useState(null); // Start point state\n  const [end, setEnd] = useState(null); // End point state\n  const [path, setPath] = useState([]); // Path state\n\n  // Function to handle pathfinding\n  const handleFindPath = () => {\n    if (start && end) {\n      // Make a POST request to the Go API to find the path\n      fetch('/findpath', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          start,\n          end\n        })\n      }).then(response => response.json()).then(data => {\n        setPath(data.result_path);\n      }).catch(err => {\n        console.error(err);\n      });\n    } else {\n      alert('Please set both start and end points.');\n    }\n  };\n\n  // Function to reset the start and end points\n  const resetStartAndEnd = () => {\n    setStart(null);\n    setEnd(null);\n    setPath([]);\n  };\n\n  // Function to reset the entire grid\n  const resetAll = () => {\n    setStart(null);\n    setEnd(null);\n    setPath([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DFS Pathfinding Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetStartAndEnd,\n        children: \"Reset Start & End\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEnd(null),\n        children: \"Reset End\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetAll,\n        children: \"Reset All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFindPath,\n        children: \"Find Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      size: 4,\n      start: start,\n      end: end,\n      path: path,\n      setStart: setStart,\n      setEnd: setEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"awve8xPypOTRXW6LPZLuVFKBtVQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Grid","jsxDEV","_jsxDEV","App","_s","start","setStart","end","setEnd","path","setPath","handleFindPath","fetch","method","headers","body","JSON","stringify","then","response","json","data","result_path","catch","err","console","error","alert","resetStartAndEnd","resetAll","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","_c","$RefreshReg$"],"sources":["/Users/darshan.mohan/Desktop/leet/go/Assessment/fe/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css';\n\nconst App = () => {\n  const [start, setStart] = useState(null); // Start point state\n  const [end, setEnd] = useState(null);     // End point state\n  const [path, setPath] = useState([]);     // Path state\n\n  // Function to handle pathfinding\n  const handleFindPath = () => {\n    if (start && end) {\n      // Make a POST request to the Go API to find the path\n      fetch('/findpath', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ start, end }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          setPath(data.result_path);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    } else {\n      alert('Please set both start and end points.');\n    }\n  };\n\n  // Function to reset the start and end points\n  const resetStartAndEnd = () => {\n    setStart(null);\n    setEnd(null);\n    setPath([]);\n  };\n\n  // Function to reset the entire grid\n  const resetAll = () => {\n    setStart(null);\n    setEnd(null);\n    setPath([]);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>DFS Pathfinding Visualizer</h1>\n      <div className=\"controls\">\n        {/* Add a new button for resetting all cells */}\n        <button onClick={resetStartAndEnd}>Reset Start & End</button>\n        <button onClick={() => setEnd(null)}>Reset End</button>\n        <button onClick={resetAll}>Reset All</button>\n        <button onClick={handleFindPath}>Find Path</button>\n      </div>\n      {/* Pass the state variables and update functions to the Grid component */}\n      <Grid size={4} start={start} end={end} path={path} setStart={setStart} setEnd={setEnd} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}